<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      camera.launch
\authors   Michael Hosmar <mhosmar@clearpathrobotics.com>
\copyright Copyright (c) 2018, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
   <!-- Determine this using rosrun spinnaker_camera_driver list_cameras.
       If not specified, defaults to first camera found. -->
  <arg name="camera_name"               default="camera" />
  <arg name="camera_serial"             default="0" />
  <arg name="calibrated"                default="0" />

  <!-- When unspecified, the driver will use the default framerate as given by the
      camera itself. Use the parameter 'control_frame_rate' to enable manual frame 
      rate control, and 'frame_rate' to set the frame rate value. -->
  <arg name="control_frame_rate"        default="false" />
  <arg name="frame_rate"                default="30" />

  <group ns="$(arg camera_name)">
    <!-- Nodelet manager -->
    <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" cwd="node" output="screen"/>

    <!-- Camera nodelet -->
    <node pkg="nodelet" type="nodelet" name="spinnaker_camera_nodelet"
          args="load spinnaker_camera_driver/SpinnakerCameraNodelet camera_nodelet_manager" >
    
      <!-- set different parameter to display colored image -->
<!-- normal grayscale -->
      <!-- <param name="image_format_color_coding"       value="Mono8" /> -->

<!-- grayscale --> 
      <!-- <param name="image_format_color_coding"       value="Mono16" /> -->

<!-- image with high red colors 
[ERROR] [1620309218.297558124]: [SpinnakerCamera]: (18384468) Feature name BalanceRatioSelector not implemented.
[ WARN] [1620309256.755945353]: Camera calibration file /home/ignis/.ros/camera_info/0.yaml not found.
-->
 <!--
rosparam get /camera/spinnaker_camera_nodelet/white_balance_blue_ratio
800.0
rosparam get /camera/spinnaker_camera_nodelet/white_balance_red_ratio 
550.0  -->
      <!-- <param name="image_format_color_coding"       value="RGB8Packed" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerGR8" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerRG8" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerGB8" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerBG8" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerGR16" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerRG16" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerGB16" /> -->

<!-- very red --> 
      <!-- <param name="image_format_color_coding"       value="BayerBG16" /> -->

<!-- grayscale with line of ants --> 
      <!-- <param name="image_format_color_coding"       value="Mono12Packed" /> -->

<!-- comment --> 
      <!-- <param name="image_format_color_coding"       value="BayerGR12Packed" /> -->

<!-- strange colors with lines of ants --> 
      <!-- <param name="image_format_color_coding"       value="BayerRG12Packed" /> -->

<!-- strange colors with lines of ants --> 
      <!-- <param name="image_format_color_coding"       value="BayerGB12Packed" /> -->

<!-- strange colors with lines of ants --> 
      <!-- <param name="image_format_color_coding"       value="BayerBG12Packed" /> -->

<!-- grayscale with vertical bright/dark lines
[ WARN] [1620310111.495875400]: Color topic '/camera/image_color' requested, but raw image data from topic '/camera/image_raw' is grayscale
 --> 
      <!-- <param name="image_format_color_coding"       value="YUV411Packed" /> -->

<!-- grayscale --> 
      <!-- <param name="image_format_color_coding"       value="YUV422Packed" /> -->

<!-- opposite colors
[ERROR] [1620310187.042752579]: [SpinnakerCamera]: (18384468) Feature name BalanceRatioSelector not implemented.
 --> 
      <!-- <param name="image_format_color_coding"       value="YUV444Packed" /> -->

<!-- blue and green colors --> 
      <!-- <param name="image_format_color_coding"       value="Mono12" /> -->

<!-- opposite colors 
[ERROR] [1620310285.778954597]: [SpinnakerCamera]: (18384468) Feature name BalanceRatioSelector not implemented.
--> 
      <!-- <param name="image_format_color_coding"       value="BayerGR12" /> -->

<!-- opposite colors --> 
      <!-- <param name="image_format_color_coding"       value="BayerRG12" /> -->

<!-- opposite colors --> 
      <!-- <param name="image_format_color_coding"       value="BayerGB12p" /> -->

<!-- opposite colors --> 
      <!-- <param name="image_format_color_coding"       value="BayerBG12p" /> -->

<!-- red and violet colored image --> 
      <!-- <param name="image_format_color_coding"       value="YCbCr8" /> -->

<!-- bright grayscale image with black stripes --> 
      <!-- <param name="image_format_color_coding"       value="YCbCr422_8" /> -->

<!-- grayscale with black lines --> 
      <!-- <param name="image_format_color_coding"       value="YCbCr411_8" /> -->

<!-- opposite colors with a lot of blue --> 
      <!-- <param name="image_format_color_coding"       value="BGR8" /> -->

<!-- only partial image with white and black lines --> 
      <!-- <param name="image_format_color_coding"       value="BGRa8" /> -->


      <!-- end of parameters set -->

<!-- Test for make it less dark -->
      <!-- Sets the operation mode of the Exposure (Timed or TriggerWidth). -->
      <!-- Dont wotk! <param name="exposure_mode"                        value="TriggerWidth" />   -->

      <!-- Sets the automatic exposure mode to: 'Off', 'Once' or 'Continuous -->
      <!-- <param name="exposure_mode"                        value="Off" />   -->

      <!-- (default was 1.7) -->
      <param name="brightness"                        value="10" />
      <!-- default was "Normal", other options 
      "Backlight" best result in test in office
      "Frontlight" 
      -->
      <param name="auto_exposure_lighting_mode"                        value="Backlight" />
<!-- end of test -->


      <param name="frame_id"                        value="camera" />
      <param name="serial"                          value="$(arg camera_serial)" />

      <!-- Frame rate -->
      <param name="acquisition_frame_rate_enable"   value="$(arg control_frame_rate)" />
      <param name="acquisition_frame_rate"          value="$(arg frame_rate)" />

      <!-- Use the camera_calibration package to create this file -->
      <param name="camera_info_url" if="$(arg calibrated)"
             value="file://$(env HOME)/.ros/camera_info/$(arg camera_serial).yaml" />


    </node>

    <!-- Debayering nodelet -->
    <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
    </node>
  </group>
</launch>
